from typing import Optional
from aiogram import Bot

from .db import (
    prefs_users_for_new,
    prefs_users_for_changes,
    prefs_get_user_class,
    log_event,
)
from .parser import grade_from_label, collapse_by_time, extract_schedule, pretty
from .ensure import ensure_sheet_for_grade


async def notify_new_schedule(bot: Bot, date_label: str) -> None:
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—è –∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É 'notify_new'.
    –í—ã—á–∏—Å–ª—è–µ—Ç –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç —á–µ—Ä–µ–∑ ensure_sheet_for_grade() –ø–æ –Ω–æ–º–µ—Ä—É –∫–ª–∞—Å—Å–∞.
    """
    user_ids = prefs_users_for_new()
    for uid in user_ids:
        klass = (prefs_get_user_class(uid) or "").upper().strip()
        if not klass:
            continue
        grade = grade_from_label(klass)
        if grade is None:
            continue

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç (payload) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞/–ø–∞—Ä–∞–ª–ª–µ–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            _g_url, gid, payload = await ensure_sheet_for_grade(date_label, grade)
            rows, labels, headers, cab_map = payload

            # –ï—Å–ª–∏ –≤ –ª–∏—Å—Ç–µ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –∫–ª—é—á–∞ ‚Äî –ø—Ä–æ–±—É–µ–º –∫–µ–π—Å-–∏–Ω—Å–µ–Ω—Å–∏—Ç–∏–≤
            key = klass if klass in labels else next((l for l in labels if l.upper() == klass), None)
            if not key:
                # –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞ –ª–∏—Å—Ç–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                log_event(uid, "notify_new_skip_no_class", f"{date_label}|{klass}")
                continue

            items = collapse_by_time(
                extract_schedule(rows, labels, headers, key, cab_map.get(key, (None, 0)))
            )
            text = f"üÜï –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_label}\n\n" + pretty(date_label, key, items)
            await bot.send_message(uid, text, parse_mode="HTML", disable_web_page_preview=True)
            log_event(uid, "notify_new_sent", f"{date_label}|{key}")
        except Exception as e:
            # –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã–º
            try:
                log_event(uid, "notify_new_error", f"{date_label}|{klass}|{e}")
            except Exception:
                pass


async def notify_schedule_changes(bot: Bot, date_label: str, diff_text: str) -> None:
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è 'notify_change'.
    –û–∂–∏–¥–∞–µ—Ç —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç diff_text (–∫–∞–∫ —É —Ç–µ–±—è –≤ –∞–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏).
    """
    for uid in prefs_users_for_changes():
        try:
            await bot.send_message(
                uid,
                f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ {date_label}\n\n{diff_text}",
                disable_web_page_preview=True,
            )
            log_event(uid, "notify_change_sent", date_label)
        except Exception as e:
            try:
                log_event(uid, "notify_change_error", f"{date_label}|{e}")
            except Exception:
                pass
