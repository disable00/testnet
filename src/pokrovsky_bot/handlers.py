import csv
import io
import asyncio
import html
import re
import time
from typing import List, Tuple, Dict, Any, Optional
from .parser import (
    collapse_by_time, extract_schedule, pretty, grade_from_label,
    extract_schedule_anycab, parse_headers
)
from .donations import make_donate_keyboard

from aiogram import F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .config import settings
from .db import (
    upsert_user,
    log_event,
    sched_upsert,
    prefs_get,
    prefs_toggle,
    prefs_set,
    prefs_get_user_class,
)
from .keyboard import (
    MAIN_KB,
    profile_kb,
    profile_grades_kb,
    profile_labels_kb,
    classes_kb,
    profile_dates_kb,
)
from .parser import collapse_by_time, extract_schedule, pretty, grade_from_label
from .sheets import resolve_google_url, sheets_meta, csv_url
from .site import get_links_from_site
from .http import fetch_text
from .state import (
    LINKS,
    DOC_URL,
    GID_BY_GRADE,
    MATRIX,
    STATE,
    kb_dates,
    kb_grades,
    kb_labels,
)

# =========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# =========================

from aiogram.types import Message  # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

async def on_donate(m):
    from .config import settings
    upsert_user(m.from_user); log_event(m.from_user.id, "donate_open")

    url_cb = (settings.DONATE_CRYPTOBOT_URL or "").strip()
    url_he = (settings.DONATE_HELEKET_URL or "").strip()
    url_da = (settings.DONATE_DONATIONALERTS_URL or "").strip()

    if not (url_cb or url_he or url_da):
        await m.answer("–°–ø–æ—Å–æ–±—ã –¥–æ–Ω–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –≤ .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
        return

    kb = make_donate_keyboard(
        cryptobot_url=url_cb,
        heleket_url=url_he,
        donationalerts_url=url_da,
    )
    await m.answer(
        "–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç üôè\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–∏–∂–µ. –û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–ª–∞—Ç—ë–∂–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.",
        reply_markup=kb, disable_web_page_preview=True
    )




_LINKS_LAST_FETCH_AT = 0.0
_LINKS_TTL_SECONDS = 60.0

def _csv_to_rows(csv_text: str) -> List[List[str]]:
    f = io.StringIO(csv_text)
    reader = csv.reader(f, delimiter=",", quotechar='"')
    return [list(row) for row in reader]

def _split_cab_keys(cab: str) -> List[str]:
    """
    –î–µ–ª–∏—Ç "–ì3-04/–ì4-03" –Ω–∞ ["–ì3-04", "–ì4-03"] –∏ —É–±–∏—Ä–∞–µ—Ç –º—É—Å–æ—Ä–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã.
    """
    if not cab:
        return []
    raw = re.split(r"[\/,;|]+", cab)
    out = []
    for part in raw:
        p = (part or "").strip().upper()
        if not p:
            continue
        if p.lower() in {"–æ–Ω–ª–∞–π–Ω", "–æ—Ñ–ª–∞–π–Ω", "–¥–∏—Å—Ç–∞–Ω—Ç"}:
            continue
        out.append(p)
    return out


async def show_loader(cb_or_msg, toast="–ó–∞–≥—Ä—É–∂–∞—é‚Ä¶", text="‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é‚Ä¶") -> Message:
    if isinstance(cb_or_msg, CallbackQuery):
        try:
            await cb_or_msg.answer(toast, show_alert=False)
        except Exception:
            pass
        return await cb_or_msg.message.answer(text)
    return await cb_or_msg.answer(text)


async def replace_loader(loader: Message, text: str, **kw):
    try:
        await loader.edit_text(text, **kw)
    except Exception:
        try:
            await loader.answer(text, **kw)
        finally:
            try:
                await loader.delete()
            except Exception:
                pass


async def ensure_links(force: bool = False):
    """–ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —Å —Å–∞–π—Ç–∞. force=True ‚Äî –∏–≥–Ω–æ—Ä –∫—ç—à–∞ (—Ñ–∏–∫—Å ¬´–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞¬ª)."""
    global LINKS, _LINKS_LAST_FETCH_AT
    now = time.monotonic()
    if force or not LINKS or (now - _LINKS_LAST_FETCH_AT) >= _LINKS_TTL_SECONDS:
        LINKS[:] = await get_links_from_site()
        _LINKS_LAST_FETCH_AT = now


def _klass_sort_key(k: str) -> tuple[int, str]:
    # –Ω–æ–º–µ—Ä + –±—É–∫–≤–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–∞/–∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
    m = re.match(r"^\s*(\d{1,2})\s*([A-Za-z–ê-–Ø–∞-—è–Å—ë]+)?\s*$", k)
    if m:
        num = int(m.group(1))
        suf = (m.group(2) or "").upper()
        return (num, suf)
    return (999, (k or "").upper())


def _known_classes_from_matrix() -> List[str]:
    labels: set[str] = set()
    for (_date, _gid), payload in MATRIX.items():
        try:
            _rows, lbls, _hr, _cab = payload
        except Exception:
            continue
        for L in (lbls or []):
            s = str(L or "").strip().upper()
            if s:
                labels.add(s)
    return sorted(labels, key=_klass_sort_key)


async def _best_date_label() -> Optional[str]:
    await ensure_links(force=True)
    if LINKS:
        return LINKS[0].date
    if DOC_URL:
        return next(iter(DOC_URL.keys()))
    return None


async def _prepare_all_classes() -> List[str]:
    """
    –î–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã–º: —Ç—è–Ω–µ–º —Å–≤–µ–∂—É—é –¥–∞—Ç—É, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç MATRIX),
    —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Å–æ–≤.
    """
    classes = _known_classes_from_matrix()
    if classes:
        return classes

    date = await _best_date_label()
    if not date:
        return classes

    g_url = DOC_URL.get(date)
    if not g_url:
        link = next((l for l in LINKS if l.date == date), None)
        if link:
            try:
                g_url = await resolve_google_url(link.url)
                DOC_URL[date] = g_url
                sched_upsert(date, link.url, g_url)
            except Exception:
                g_url = None
    if not g_url:
        return classes

    try:
        gid2title, _ = await sheets_meta(g_url)
    except Exception:
        gid2title = {}

    if gid2title:
        from .state import parse_class_label
        quick = {grade_from_label(parse_class_label(t) or ""): gid for gid, t in gid2title.items()}
        grades = [g for g in quick.keys() if g]
        if grades:
            GID_BY_GRADE[date] = {g: quick[g] for g in grades}
            from .ensure import ensure_sheet_for_grade
            for g in grades:
                try:
                    await ensure_sheet_for_grade(date, g)  # –∑–∞–ø–æ–ª–Ω—è–µ—Ç MATRIX ‚Üí labels
                except Exception:
                    pass

    return _known_classes_from_matrix()


def _recent_dates(limit: int = 12) -> List[str]:
    try:
        from .db import DB
        rows = DB.execute(
            "SELECT date_label FROM schedules ORDER BY created_at DESC LIMIT ?",
            (limit,),
        ).fetchall()
        dates = [r[0] for r in rows]
    except Exception:
        dates = []
    if not dates:
        dates = [l.date for l in LINKS[:limit]]
    return dates


# =========================
# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ç–æ–∫
# =========================

async def cmd_start(m: Message):
    upsert_user(m.from_user)
    log_event(m.from_user.id, "cmd_start")
    await m.answer("–ò—â—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ø–ª–æ—â–∞–¥–∫–∞ ‚Ññ1)...", reply_markup=MAIN_KB)
    await show_dates(m)


async def show_dates(m: Message):
    await ensure_links(force=True)
    if not LINKS:
        return await m.answer("–ù–µ –Ω–∞—à—ë–ª —Å—Å—ã–ª–∫–∏ –≤ —Å–µ–∫—Ü–∏–∏ ‚Ññ1.", reply_markup=MAIN_KB)
    STATE[m.chat.id] = {"step": "dates"}
    await m.answer("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=kb_dates(LINKS))


async def on_main(m: Message):
    upsert_user(m.from_user)
    log_event(m.from_user.id, "click_main")
    await show_dates(m)


async def on_back(m: Message):
    upsert_user(m.from_user)
    log_event(m.from_user.id, "click_back")
    st = STATE.get(m.chat.id) or {}
    if st.get("step") in (None, "dates"):
        return await show_dates(m)
    if st.get("step") == "grades":
        return await show_dates(m)
    if st.get("step") == "classes":
        date = st.get("date")
        if not date:
            return await show_dates(m)
        return await ask_grades(m, date)
    if st.get("step") == "shown":
        date, gid, grade = st.get("date"), st.get("gid"), st.get("grade")
        if not (date and gid and grade is not None):
            return await show_dates(m)
        rows, labels, _hr, _cab = MATRIX.get((date, gid), (None, None, None, None))
        if rows is None:
            from .ensure import ensure_sheet_for_grade
            rows, labels, hr, cab = (await ensure_sheet_for_grade(date, grade))[2]
            MATRIX[(date, gid)] = (rows, labels, hr, cab)
        ks = [L for L in labels if grade_from_label(L) == grade]
        await m.answer("–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å:", reply_markup=kb_labels(date, gid, ks))
        STATE[m.chat.id] = {"step": "classes", "date": date, "gid": gid, "grade": grade}


async def on_news(m: Message):
    upsert_user(m.from_user)
    log_event(m.from_user.id, "click_news")
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª", url=settings.NEWS_CHANNEL_URL)]
        ]
    )
    await m.answer("–ù–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª:", reply_markup=kb)


async def on_pick_date(c: CallbackQuery):
    upsert_user(c.from_user)
    await ensure_links(force=True)
    idx = int(c.data.split(":", 1)[1])
    if idx < 0 or idx >= len(LINKS):
        return await c.answer()
    link = LINKS[idx]
    log_event(c.from_user.id, "pick_date", link.date)
    loader = await show_loader(c, "–ó–∞–≥—Ä—É–∂–∞—é‚Ä¶", "‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤‚Ä¶")
    try:
        g_url = await resolve_google_url(link.url)
    except Exception as e:
        return await replace_loader(loader, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Google Sheets: {e}")
    DOC_URL[link.date] = g_url
    sched_upsert(link.date, link.url, g_url)
    gid2title, _ = await sheets_meta(g_url)
    from .state import parse_class_label
    quick = {grade_from_label(parse_class_label(t) or ""): gid for gid, t in gid2title.items()}
    grades = [g for g in quick.keys() if g]
    if grades:
        GID_BY_GRADE[link.date] = {g: quick[g] for g in grades}
        await replace_loader(
            loader,
            f"–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ ({link.date}):",
            reply_markup=kb_grades(link.date, grades),
        )
    else:
        await replace_loader(
            loader,
            f"–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ ({link.date}):",
            reply_markup=kb_grades(link.date, list(range(1, 12))),
        )
    STATE[c.message.chat.id] = {"step": "grades", "date": link.date}


async def ask_grades(msg_target: Message, date: str):
    await ensure_links(force=True)
    g_url = DOC_URL.get(date)
    if not g_url:
        link = next((l for l in LINKS if l.date == date), None)
        if not link:
            return await msg_target.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –¥–∞—Ç—É.", reply_markup=MAIN_KB)
        g_url = await resolve_google_url(link.url)
        DOC_URL[date] = g_url
        sched_upsert(date, link.url, g_url)
    gid2title, _ = await sheets_meta(g_url)
    from .state import parse_class_label
    quick = {grade_from_label(parse_class_label(t) or ""): gid for gid, t in gid2title.items()}
    grades = [g for g in quick.keys() if g]
    if grades:
        GID_BY_GRADE[date] = {g: quick[g] for g in grades}
        await msg_target.answer(
            f"–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ ({date}):", reply_markup=kb_grades(date, grades)
        )
    else:
        await msg_target.answer(
            f"–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ ({date}):",
            reply_markup=kb_grades(date, list(range(1, 12))),
        )


async def on_pick_grade(c: CallbackQuery):
    upsert_user(c.from_user)
    _, date, gs = c.data.split(":", 2)
    grade = int(gs)
    log_event(c.from_user.id, "pick_grade", f"{date}|{grade}")
    loader = await show_loader(c, "–ó–∞–≥—Ä—É–∂–∞—é‚Ä¶", "‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚Ä¶")
    try:
        from .ensure import ensure_sheet_for_grade
        _g_url, gid, payload = await ensure_sheet_for_grade(date, grade)
    except Exception as e:
        return await replace_loader(loader, f"–ù–µ –Ω–∞—à—ë–ª –≤–∫–ª–∞–¥–∫—É: {e}")
    rows, labels, _hr, _cab = payload
    ks = [L for L in labels if grade_from_label(L) == grade]
    await replace_loader(loader, "–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å:", reply_markup=kb_labels(date, gid, ks))
    STATE[c.message.chat.id] = {"step": "classes", "date": date, "gid": gid, "grade": grade}


async def on_pick_label(c: CallbackQuery):
    upsert_user(c.from_user)
    _, date, gid, klass = c.data.split(":", 3)
    key = (klass or "").upper()
    log_event(c.from_user.id, "pick_class", f"{date}|{key}")
    loader = await show_loader(c, "–ó–∞–≥—Ä—É–∂–∞—é‚Ä¶", "‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚Ä¶")

    if (date, gid) not in MATRIX:
        try:
            grade = int(re.match(r"(\d{1,2})", key).group(1))
            from .ensure import ensure_sheet_for_grade
            _g_url, _gid, _payload = await ensure_sheet_for_grade(date, grade)
        except Exception as e:
            return await replace_loader(loader, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—Å—Ç—É: {e}")

    rows, labels, headers, cab_map = MATRIX[(date, gid)]
    if key not in labels:
        return await replace_loader(loader, "–¢–∞–∫–æ–π –∫–ª–∞—Å—Å –Ω–µ –Ω–∞—à—ë–ª—Å—è –Ω–∞ –ª–∏—Å—Ç–µ.")
    items = collapse_by_time(
        extract_schedule(rows, labels, headers, key, cab_map.get(key, (None, 0)))
    )
    await replace_loader(loader, pretty(date, key, items), parse_mode="HTML")
    STATE[c.message.chat.id] = {
        "step": "shown",
        "date": date,
        "gid": gid,
        "grade": grade_from_label(key),
        "klass": key,
    }
    log_event(c.from_user.id, "show_schedule", f"{date}|{key}")
    # –í–∞–∂–Ω–æ: –ù–ò–ö–ê–ö–û–ì–û –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! (–∫–ª–∞—Å—Å –≤ –õ–ö –º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é)


# =========================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
# =========================

from .subscription import ALLOWED_STATUSES, make_sub_keyboard

async def on_check_subscription(cb: CallbackQuery, bot: Bot):
    try:
        await cb.answer()
    except Exception:
        pass

    user_id = cb.from_user.id
    ok = False
    try:
        member = await bot.get_chat_member(settings.NEWS_CHANNEL_ID, user_id)
        ok = getattr(member, "status", None) in ALLOWED_STATUSES
    except TelegramBadRequest:
        ok = False

    if ok:
        if cb.message:
            try:
                await cb.message.edit_reply_markup(reply_markup=None)
            except TelegramBadRequest:
                pass
            await cb.message.answer("–ì–æ—Ç–æ–≤–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    else:
        if cb.message:
            try:
                await cb.message.edit_reply_markup(
                    reply_markup=make_sub_keyboard(settings.NEWS_CHANNEL_URL)
                )
            except TelegramBadRequest:
                pass
            await cb.message.answer(
                "–ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –µ—â—ë —Ä–∞–∑."
            )


# =========================
# –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢
# =========================

async def on_profile_open(m: Message):
    """–û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ /profile)."""
    upsert_user(m.from_user)
    log_event(m.from_user.id, "profile_open")
    prefs = prefs_get(m.from_user.id)
    await m.answer(
        "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n‚Ä¢ –í–∫–ª—é—á–∞–π—Ç–µ/–æ—Ç–∫–ª—é—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å (–Ω–æ–º–µ—Ä ‚Üí –±—É–∫–≤–∞)\n‚Ä¢ –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ üìò –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞",
        reply_markup=profile_kb(prefs),
    )


async def on_profile_cmd(m: Message):
    await on_profile_open(m)


async def on_profile_close(cb: CallbackQuery):
    try:
        await cb.message.edit_text("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.")
    except Exception:
        await cb.message.answer("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç.")
    await cb.answer()


async def on_profile_back(cb: CallbackQuery):
    prefs = prefs_get(cb.from_user.id)
    try:
        await cb.message.edit_text("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=profile_kb(prefs))
    except Exception:
        await cb.message.answer("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=profile_kb(prefs))
    await cb.answer()


async def on_profile_toggle_new(cb: CallbackQuery):
    val = prefs_toggle(cb.from_user.id, "notify_new")
    prefs = prefs_get(cb.from_user.id)
    try:
        await cb.message.edit_reply_markup(reply_markup=profile_kb(prefs))
    except Exception:
        pass
    await cb.answer(f"–ù–æ–≤—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {'ON' if val else 'OFF'}")
    log_event(cb.from_user.id, "profile_toggle_new", str(val))


async def on_profile_toggle_chg(cb: CallbackQuery):
    val = prefs_toggle(cb.from_user.id, "notify_change")
    prefs = prefs_get(cb.from_user.id)
    try:
        await cb.message.edit_reply_markup(reply_markup=profile_kb(prefs))
    except Exception:
        pass
    await cb.answer(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è: {'ON' if val else 'OFF'}")
    log_event(cb.from_user.id, "profile_toggle_chg", str(val))


async def on_profile_choose_class(cb: CallbackQuery):
    """–í –õ–ö: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä –Ω–æ–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ 5‚Äì11), –±–µ–∑ –¥–∞—Ç, –±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    await ensure_links(force=True)
    grades = list(range(5, 12))  # 5‚Äì11
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (5‚Äì11):", reply_markup=profile_grades_kb(grades))
    except Exception:
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (5‚Äì11):", reply_markup=profile_grades_kb(grades))
    await cb.answer()


async def on_profile_choose_grade_letters(cb: CallbackQuery):
    """–ü–æ—Å–ª–µ 'prof:g:<grade>': –ø–æ–∫–∞–∑–∞—Ç—å –±—É–∫–≤—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å–∞–º–æ–π —Å–≤–µ–∂–µ–π –¥–∞—Ç—ã."""
    try:
        grade = int(cb.data.split(":")[-1])
    except Exception:
        await cb.answer()
        return

    date = await _best_date_label()
    if not date:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    try:
        from .ensure import ensure_sheet_for_grade
        _g_url, _gid, payload = await ensure_sheet_for_grade(date, grade)
    except Exception:
        await cb.answer("–î–ª—è —ç—Ç–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", show_alert=True)
        return

    _rows, labels, _hr, _cab = payload
    letters = [L for L in labels if grade_from_label(L) == grade]
    if not letters:
        await cb.answer("–ë—É–∫–≤ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    try:
        await cb.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –¥–ª—è {grade} –∫–ª–∞—Å—Å–∞:",
            reply_markup=profile_labels_kb(grade, letters),
        )
    except Exception:
        await cb.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –¥–ª—è {grade} –∫–ª–∞—Å—Å–∞:",
            reply_markup=profile_labels_kb(grade, letters),
        )
    await cb.answer()


async def on_profile_pick_class(cb: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."""
    klass = cb.data.split(":")[-1].upper()
    prefs_set(cb.from_user.id, klass=klass)
    prefs = prefs_get(cb.from_user.id)
    txt = f"–ö–ª–∞—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{html.escape(klass)}</b>\n\n–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:"
    try:
        await cb.message.edit_text(txt, reply_markup=profile_kb(prefs), parse_mode="HTML")
    except Exception:
        await cb.message.answer(txt, reply_markup=profile_kb(prefs), parse_mode="HTML")
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
    log_event(cb.from_user.id, "profile_set_class", klass)


# ¬´üìò –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞¬ª
async def on_profile_my_open(cb: CallbackQuery):
    await ensure_links(force=True)
    dates = _recent_dates(limit=12)
    if not dates:
        await cb.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.", show_alert=True)
        return
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=profile_dates_kb(dates))
    except Exception:
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=profile_dates_kb(dates))
    await cb.answer()


async def on_profile_my_page(cb: CallbackQuery):
    try:
        page = int(cb.data.split(":")[-1])
    except Exception:
        page = 0
    dates = _recent_dates(limit=50)
    try:
        await cb.message.edit_reply_markup(reply_markup=profile_dates_kb(dates, page=page))
    except Exception:
        pass
    await cb.answer()


async def on_profile_my_pick_date(cb: CallbackQuery):
    date = cb.data.split(":", 2)[-1]
    klass = (prefs_get_user_class(cb.from_user.id) or "").upper().strip()
    if not klass:
        await cb.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ.", show_alert=True)
        return
    grade = grade_from_label(klass)
    if grade is None:
        await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    try:
        from .ensure import ensure_sheet_for_grade
        _g_url, gid, payload = await ensure_sheet_for_grade(date, grade)
    except Exception as e:
        await cb.answer(f"–õ–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}", show_alert=True)
        return
    rows, labels, headers, cab_map = payload
    key = klass if klass in labels else next((l for l in labels if l.upper() == klass), None)
    if not key:
        await cb.answer("–í–∞—à –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—Å—Ç–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.", show_alert=True)
        return
    items = collapse_by_time(extract_schedule(rows, labels, headers, key, cab_map.get(key, (None, 0))))
    text = f"üìò –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {html.escape(key)} –Ω–∞ {html.escape(date)}\n\n" + pretty(date, key, items)
    try:
        await cb.message.edit_text(text, parse_mode="HTML", disable_web_page_preview=True)
    except Exception:
        await cb.message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
    await cb.answer()
    log_event(cb.from_user.id, "profile_my_show", f"{date}|{key}")


# =========================
# –†–ê–°–ü–ò–°–ê–ù–ò–ï –ö–ê–ë–ò–ù–ï–¢–û–í (–≥—Ä—É–ø–ø—ã –ø–æ —ç—Ç–∞–∂–∞–º)
# =========================

from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ö–µ—à: {date: {cab: [(time, klass, subj), ...]}}
CAB_INDEX: Dict[str, Dict[str, List[Tuple[str, str, Optional[str]]]]] = {}

def _is_physical_cab(cab: Optional[str]) -> bool:
    if not cab:
        return False
    u = cab.upper()
    if any(x in u for x in ("–û–ù–õ–ê–ô–ù", "–û–§–õ–ê–ô–ù", "–î–ò–°–¢–ê–ù–¢")):
        return False
    return True

# --- –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —ç—Ç–∞–∂–∞–º/—Å–ø–æ—Ä—Ç–∑–∞–ª–∞–º ---
def _cab_group_key(cab: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É –∏–∑ –≥—Ä—É–ø–ø: F1/F2/F3/F4/SPORT/OTHER.
    –ü—Ä–∞–≤–∏–ª–æ: –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ ‚Äî –∫–æ—Ä–ø—É—Å, –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ –ø–æ—Å–ª–µ –Ω–µ—ë ‚Äî —ç—Ç–∞–∂.
    –ü—Ä–∏–º–µ—Ä—ã: –ì3-08 -> F3, –ë4-08 -> F4, –ì2-21 -> F2, —Å–ø–æ—Ä—Ç–∑–∞–ª2 -> SPORT
    """
    u = (cab or "").upper()
    if "–°–ü–û–†–¢–ó–ê–õ" in u:
        return "SPORT"
    m = re.match(r"^[A-Z–ê-–Ø]\s*(\d)", u)
    if m:
        f = int(m.group(1))
        if 1 <= f <= 4:
            return f"F{f}"
    return "OTHER"

def _group_cabs(cabmap: Dict[str, List[Tuple[str, str, Optional[str]]]]) -> Dict[str, List[Tuple[str, int]]]:
    """
    -> {"F1":[(cab, count), ...], "F2":..., "SPORT":[...], "OTHER":[...]}
    """
    groups: Dict[str, List[Tuple[str, int]]] = {}
    for cab, entries in cabmap.items():
        g = _cab_group_key(cab)
        groups.setdefault(g, []).append((cab, len(entries)))
    for g in groups:
        groups[g].sort(key=lambda x: x[0])  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞–±–∏–Ω–µ—Ç–∞
    return groups

def _kb_rooms_dates(links: List) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    for i, l in enumerate(links):
        b.button(text=l.date, callback_data=f"rd:{i}")
    b.adjust(3)
    return b.as_markup()

def _kb_room_groups(date: str, groups: Dict[str, List[Tuple[str, int]]]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–∂–∞/—Å–ø–æ—Ä—Ç–∑–∞–ª–æ–≤.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –µ—Å—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã.
    """
    titles = [
        ("F1", "1 —ç—Ç–∞–∂"),
        ("F2", "2 —ç—Ç–∞–∂"),
        ("F3", "3 —ç—Ç–∞–∂"),
        ("F4", "4 —ç—Ç–∞–∂"),
        ("SPORT", "–°–ø–æ—Ä—Ç–∑–∞–ª—ã"),
        ("OTHER", "–ü—Ä–æ—á–µ–µ"),
    ]
    b = InlineKeyboardBuilder()
    for key, label in titles:
        if groups.get(key):
            total = sum(n for _cab, n in groups[key])
            b.button(text=f"{label} ({total})", callback_data=f"rcgrp:{date}:{key}")
    b.button(text="‚¨ÖÔ∏è –ö –¥–∞—Ç–∞–º", callback_data="rr:back")
    # 2-2-2-...-1 —Ä–∞—Å–∫–ª–∞–¥–∫–∞
    rows: List[int] = []
    cnt = len([1 for key, _ in titles if groups.get(key)])
    if cnt:
        rows.extend([2] * (cnt // 2))
        if cnt % 2:
            rows.append(1)
    rows.append(1)  # ¬´–ö –¥–∞—Ç–∞–º¬ª
    b.adjust(*rows)
    return b.as_markup()

def _kb_cabinets_for_group(date: str, group_key: str, items: List[Tuple[str, int]]) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    for cab, n in items:
        b.button(text=f"{cab} ({n})", callback_data=f"rc:{date}:{cab}")
    b.button(text="‚¨ÖÔ∏è –ö —ç—Ç–∞–∂–∞–º", callback_data=f"rcb:{date}")
    # 3 –≤ —Ä—è–¥ + –Ω–∞–∑–∞–¥
    rows: List[int] = []
    cnt = len(items)
    if cnt:
        rows.extend([3] * (cnt // 3))
        if cnt % 3:
            rows.append(cnt % 3)
    rows.append(1)
    b.adjust(*rows)
    return b.as_markup()

def _time_sort_key(t: str) -> Tuple[int, int]:
    s = (t or "").replace(".", ":")
    m = re.search(r"(\d{1,2}):(\d{2})", s)
    if not m:
        return (99, 99)
    return (int(m.group(1)), int(m.group(2)))

# --- –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ —Å –Ω—É–ª—è (–∫–∞–∫ —Å–¥–µ–ª–∞–ª–∏ —Ä–∞–Ω–µ–µ) ---
async def _build_cabinet_index(date: str) -> Dict[str, List[Tuple[str, str, Optional[str]]]]:
    cached = CAB_INDEX.get(date)
    if cached:
        return cached

    g_url = DOC_URL.get(date)
    if not g_url:
        link = next((l for l in LINKS if l.date == date), None)
        if link:
            try:
                g_url = await resolve_google_url(link.url)
                DOC_URL[date] = g_url
                sched_upsert(date, link.url, g_url)
            except Exception:
                g_url = None
    if not g_url:
        return {}

    try:
        gid2title, gids = await sheets_meta(g_url)
        gid_list = list(gid2title.keys() or gids or [])
    except Exception:
        gid_list = []

    out: Dict[str, List[Tuple[str, str, Optional[str]]]] = {}

    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–∞—Ä—ã –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ (–∫–∞–±–∏–Ω–µ—Ç –∏—â–µ–º ¬´–≤ —Å–≤–æ–µ–π –∑–æ–Ω–µ¬ª)
    from .ensure import ensure_sheet_for_grade
    from .state import parse_class_label
    for gid in gid_list:
        # —É–∑–Ω–∞—ë–º –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (grade) –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = (gid2title.get(gid) or "").strip()
        grade = grade_from_label(parse_class_label(title) or "") if title else None
        if not grade:
            # fallback: –ø–µ—Ä–µ–±–µ—Ä—ë–º 5..11
            for g in range(5, 12):
                try:
                    _g_url, _gid, payload = await ensure_sheet_for_grade(date, g)
                except Exception:
                    continue
                if _gid == gid:
                    grade = g
                    rows, labels, headers, _cab_map_unused = payload
                    break
            else:
                # –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∫–ª–∞–¥–∫—É
                continue
        else:
            try:
                _g_url, _gid, payload = await ensure_sheet_for_grade(date, grade)
            except Exception:
                continue
            rows, labels, headers, _cab_map_unused = payload

        for klass in labels:
            items = extract_schedule_anycab(rows, labels, headers, klass)
            for t, subj, cab in items:
                if not _is_physical_cab(cab):
                    continue
                # –¥–µ–ª–∏–º "–ì3-04/–ì4-03" –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã
                for cab_one in re.split(r"[\/,;|]+", (cab or "").upper()):
                    key = cab_one.strip()
                    if not key or not _is_physical_cab(key):
                        continue
                    out.setdefault(key, []).append((t, klass, subj))

    for cab, lst in out.items():
        lst.sort(key=lambda x: _time_sort_key(x[0]))

    CAB_INDEX[date] = out
    return out

# --- —Ö–µ–Ω–¥–ª–µ—Ä—ã ---

async def on_rooms(m: Message):
    """–ö–Ω–æ–ø–∫–∞ 'üè´ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤' ‚Äî —Å–Ω–∞—á–∞–ª–∞ –¥–∞—Ç—ã."""
    upsert_user(m.from_user); log_event(m.from_user.id, "rooms_open")
    await ensure_links(force=True)
    if not LINKS:
        return await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.", reply_markup=MAIN_KB)
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤:", reply_markup=_kb_rooms_dates(LINKS))

async def on_rooms_pick_date(c: CallbackQuery):
    upsert_user(c.from_user); await ensure_links(force=True)
    try:
        idx = int(c.data.split(":", 1)[1])
    except Exception:
        return await c.answer()
    if idx < 0 or idx >= len(LINKS):
        return await c.answer()

    link = LINKS[idx]
    log_event(c.from_user.id, "rooms_pick_date", link.date)
    loader = await show_loader(c, "–°–æ–±–∏—Ä–∞—é –∫–∞–±–∏–Ω–µ—Ç—ã‚Ä¶", "‚öôÔ∏è –°—Ç—Ä–æ—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º‚Ä¶")

    try:
        cabmap = await _build_cabinet_index(link.date)
    except Exception as e:
        return await replace_loader(loader, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤: {e}")

    if not cabmap:
        return await replace_loader(loader, "–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∫–∞–±–∏–Ω–µ—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    groups = _group_cabs(cabmap)
    await replace_loader(loader, f"–≠—Ç–∞–∂–∏ –Ω–∞ {link.date}:", reply_markup=_kb_room_groups(link.date, groups))
    STATE[c.message.chat.id] = {"step": "rooms_groups", "date": link.date}

async def on_rooms_pick_group(c: CallbackQuery):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã (—ç—Ç–∞–∂/—Å–ø–æ—Ä—Ç–∑–∞–ª—ã)."""
    upsert_user(c.from_user)
    try:
        _, date, group_key = c.data.split(":", 2)
    except Exception:
        return await c.answer()

    cabmap = CAB_INDEX.get(date) or {}
    if not cabmap:
        cabmap = await _build_cabinet_index(date)
    groups = _group_cabs(cabmap)
    items = groups.get(group_key) or []
    if not items:
        return await c.answer("–ü–æ–∫–∞ –ø—É—Å—Ç–æ.", show_alert=True)

    label = {"F1": "1 —ç—Ç–∞–∂", "F2": "2 —ç—Ç–∞–∂", "F3": "3 —ç—Ç–∞–∂", "F4": "4 —ç—Ç–∞–∂",
             "SPORT": "–°–ø–æ—Ä—Ç–∑–∞–ª—ã", "OTHER": "–ü—Ä–æ—á–µ–µ"}.get(group_key, group_key)
    await c.message.edit_text(f"{label} ‚Äî {date}:", reply_markup=_kb_cabinets_for_group(date, group_key, items))
    await c.answer()

async def on_rooms_pick_cabinet(c: CallbackQuery):
    upsert_user(c.from_user)
    try:
        _, date, cab = c.data.split(":", 2)
    except Exception:
        return await c.answer()

    cabmap = CAB_INDEX.get(date) or {}
    if not cabmap:
        cabmap = await _build_cabinet_index(date)

    items = cabmap.get(cab)
    if not items:
        return await c.answer("–î–ª—è —ç—Ç–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", show_alert=True)

    lines = [f"<b>–ö–∞–±–∏–Ω–µ—Ç {html.escape(cab)}</b> ‚Äî {html.escape(date)}", ""]
    for i, (t, klass, subj) in enumerate(items, 1):
        subj_html = f" ‚Äî <i>{html.escape(subj)}</i>" if (subj and subj.strip()) else ""
        lines.append(f"{i}. {html.escape(t)} ‚Äî <b>{html.escape(klass)}</b>{subj_html}")

    b = InlineKeyboardBuilder()
    b.button(text="‚¨ÖÔ∏è –ö —ç—Ç–∞–∂–∞–º", callback_data=f"rcb:{date}")
    kb = b.as_markup()

    await c.message.edit_text("\n".join(lines), parse_mode="HTML", reply_markup=kb)
    await c.answer()
    log_event(c.from_user.id, "rooms_show_cab", f"{date}|{cab}")

async def on_rooms_back_to_cabs(c: CallbackQuery):
    """–ù–∞–∑–∞–¥ —Å–æ —Å–ø–∏—Å–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∫ —ç—Ç–∞–∂–∞–º."""
    upsert_user(c.from_user)
    date = c.data.split(":", 1)[1] if ":" in c.data else None
    if not date:
        await ensure_links(force=True)
        return await c.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤:",
            reply_markup=_kb_rooms_dates(LINKS),
        )
    cabmap = CAB_INDEX.get(date) or {}
    if not cabmap:
        cabmap = await _build_cabinet_index(date)
    groups = _group_cabs(cabmap)
    await c.message.edit_text(f"–≠—Ç–∞–∂–∏ –Ω–∞ {date}:", reply_markup=_kb_room_groups(date, groups))
    await c.answer()
async def on_rooms_back_to_dates(c: CallbackQuery):
    """–ù–∞–∑–∞–¥ —Å —ç—Ç–∞–∂–µ–π –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç (—á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å toast)."""
    upsert_user(c.from_user)
    await ensure_links(force=True)
    try:
        await c.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤:",
            reply_markup=_kb_rooms_dates(LINKS),
        )
    except Exception:
        await c.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤:",
            reply_markup=_kb_rooms_dates(LINKS),
        )
    await c.answer()


# =========================
# ADMIN
# =========================

def is_admin(uid: int) -> bool:
    return uid == settings.ADMIN_ID


async def cmd_admin(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    upsert_user(m.from_user)
    try:
        from .db import DB
        from .utils import fmt_msk
    except Exception:
        return await m.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    tu = DB.execute("SELECT COUNT(*) FROM users").fetchone()[0]
    te = DB.execute("SELECT COUNT(*) FROM events").fetchone()[0]
    a24 = DB.execute("SELECT COUNT(DISTINCT user_id) FROM events WHERE ts >= datetime('now','-1 day')").fetchone()[0]
    top = DB.execute(
        "SELECT user_id, first_name, username, msg_count, last_seen FROM users ORDER BY msg_count DESC, last_seen DESC LIMIT 10"
    ).fetchall()
    last = DB.execute(
        "SELECT e.ts, e.type, u.user_id, u.username, e.meta FROM events e JOIN users u USING(user_id) ORDER BY e.id DESC LIMIT 10"
    ).fetchall()

    def ulabel(r):
        uid, fn, un, cnt, ls = r
        tag = f"@{un}" if un else str(uid)
        return f"{tag} ‚Äî {cnt} —Å–æ–±—ã—Ç–∏–π (–ø–æ—Å–ª.: {fmt_msk(ls)})"

    def eline(r):
        ts, et, uid, un, meta = r
        tag = f"@{un}" if un else str(uid)
        return f"{fmt_msk(ts)} ¬∑ {et} ¬∑ {tag} ¬∑ {meta or ''}"

    msg = [
        "üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>",
        f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{tu}</b>",
        f"\nüì® –°–æ–±—ã—Ç–∏–π: <b>{te}</b>",
        f"\nüü¢ –ê–∫—Ç–∏–≤–Ω–æ –∑–∞ 24—á: <b>{a24}</b>",
        "\n\nüèÜ <b>–¢–æ–ø 10 –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n",
    ]
    msg += [f"‚Ä¢ {ulabel(r)}" for r in top] or ["‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî"]
    msg += ["\n\nüìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π</b>\n"]
    msg += [f"‚Ä¢ {eline(r)}" for r in last] or ["‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî"]
    await m.answer("".join(msg), parse_mode="HTML")
